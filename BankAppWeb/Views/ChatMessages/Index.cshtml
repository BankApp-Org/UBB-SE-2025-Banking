@using Common.Models.Social
@model BankAppWeb.Models.ChatMessagesViewModel

@{
    ViewData["Title"] = "Chat Messages";
}

<link href="~/css/message-templates.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<div class="container">
    <!-- Chat Header -->
    <div class="row bg-dark text-white p-3 mb-3">
        <div class="col">
            <h3>@Model.CurrentChatName</h3>
            <p>@Model.CurrentChatParticipantsString</p>
        </div>
        <div class="col-auto">
            <a asp-controller="AddNewMember" asp-action="Index" asp-route-chatId="@Model.CurrentChatID" class="btn btn-secondary me-2">Add Member</a>
            <a asp-controller="LeaveChat" asp-action="Index" asp-route-chatId="@Model.CurrentChatID" class="btn btn-danger">Leave Chat</a>
        </div>
    </div>

    <!-- Messages List -->
    <div class="row">
        <div class="col">
            <div id="messagesContainer" class="border p-3" style="min-height: 400px; max-height: 400px; overflow-y: auto; background-color: #000; color: #fff;">
                @foreach (var message in Model.ChatMessages)
                {
                    <div class="message mb-2 @(message.UserId == Model.CurrentUserID ? "text-end" : "text-start")">
                        <strong>@message.Sender.UserName</strong> <small>@message.CreatedAt.ToString("g")</small>                        @switch (message)
                        {
                            case TextMessage text:
                                <div class="message-bubble @(message.UserId == Model.CurrentUserID ? "sent" : "received")">
                                    <div>@text.MessageContent</div>
                                    <div class="message-meta">@message.CreatedAt.ToString("HH:mm")</div>
                                </div>
                                break;
                            case ImageMessage image:
                                <div class="message-bubble @(message.UserId == Model.CurrentUserID ? "sent" : "received")">
                                    <img src="@image.ImageUrl" alt="Image" style="max-width: 200px; border-radius: 8px;" />
                                    <div class="message-meta">@message.CreatedAt.ToString("HH:mm")</div>
                                </div>
                                break;
                            case TransferMessage transfer:
                                <div class="message-bubble transfer @(message.UserId == Model.CurrentUserID ? "sent" : "received")">
                                    <div><i class="fas fa-exchange-alt"></i> Transfer</div>
                                    <div class="message-amount">@transfer.Amount @transfer.Currency</div>
                                    <div class="message-description">@transfer.Description</div>
                                    <span class="message-status status-@transfer.Status.ToLower()">@transfer.Status</span>
                                    <div class="message-meta">@message.CreatedAt.ToString("HH:mm")</div>
                                </div>
                                break;
                            case RequestMessage request:
                                <div class="message-bubble request @(message.UserId == Model.CurrentUserID ? "sent" : "received")">
                                    <div><i class="fas fa-hand-holding-usd"></i> Money Request</div>
                                    <div class="message-amount">@request.Amount @request.Currency</div>
                                    <div class="message-description">@request.Description</div>
                                    <span class="message-status status-@request.Status.ToLower()">@request.Status</span>
                                    <div class="message-meta">@message.CreatedAt.ToString("HH:mm")</div>
                                </div>
                                break;
                            case BillSplitMessage billSplit:
                                <div class="message-bubble bill-split @(message.UserId == Model.CurrentUserID ? "sent" : "received")">
                                    <div><i class="fas fa-receipt"></i> Bill Split</div>
                                    <div class="message-amount">@billSplit.TotalAmount @billSplit.Currency</div>
                                    <div class="message-description">@billSplit.Description</div>
                                    <div>Split between @billSplit.Participants.Count participants</div>
                                    <span class="message-status status-@billSplit.Status.ToLower()">@billSplit.Status</span>
                                    <div class="message-meta">@message.CreatedAt.ToString("HH:mm")</div>
                                </div>
                                break;
                        }
                        <div>
                            <form asp-controller="ChatMessages" asp-action="DeleteMessage" method="post" class="d-inline">
                                <input type="hidden" name="chatId" value="@Model.CurrentChatID" />
                                <input type="hidden" name="messageId" value="@message.Id" />
                                <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                            </form>
                            @if (message is TextMessage || message is ImageMessage)
                            {
                                <form asp-controller="ChatMessages" asp-action="ReportMessage" method="get" class="d-inline">
                                    <input type="hidden" name="chatId" value="@Model.CurrentChatID" />
                                    <input type="hidden" name="messageId" value="@message.Id" />
                                    <button type="submit" class="btn btn-sm btn-warning">Report</button>
                                </form>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>    <!-- Unified Message Input -->
    <div class="unified-message-container">
        <div class="message-type-selector">
            <button type="button" class="message-type-btn active" data-type="text">
                <i class="fas fa-comment"></i> Text
            </button>
            <button type="button" class="message-type-btn" data-type="image">
                <i class="fas fa-image"></i> Image
            </button>
            <button type="button" class="message-type-btn" data-type="transfer">
                <i class="fas fa-exchange-alt"></i> Transfer
            </button>
            <button type="button" class="message-type-btn" data-type="request">
                <i class="fas fa-hand-holding-usd"></i> Request
            </button>
            <button type="button" class="message-type-btn" data-type="billsplit">
                <i class="fas fa-receipt"></i> Bill Split
            </button>
        </div>

        <div class="message-input-fields">
            <!-- Text Message Input -->
            <div id="text-input" class="input-type-container">
                <form asp-controller="ChatMessages" asp-action="SendMessage" method="post">
                    <input type="hidden" name="CurrentChatID" value="@Model.CurrentChatID" />
                    <input type="hidden" name="SelectedMessageType" value="Text" />
                    <div class="input-group">
                        <label for="MessageContent">Message</label>
                        <textarea class="form-control" name="MessageContent" placeholder="Type your message..." maxlength="256" rows="3"></textarea>
                        <div class="character-count">256 characters remaining</div>
                    </div>
                    <button type="submit" class="send-message-btn">
                        <i class="fas fa-paper-plane"></i> Send Message
                    </button>
                </form>
            </div>

            <!-- Image Upload Input -->
            <div id="image-input" class="input-type-container hidden">
                <form asp-controller="ChatMessages" asp-action="SendMessage" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="CurrentChatID" value="@Model.CurrentChatID" />
                    <input type="hidden" name="SelectedMessageType" value="Image" />
                    <div class="input-group">
                        <label>Upload Image</label>
                        <div class="file-upload-area" onclick="document.getElementById('imageFile').click()">
                            <i class="fas fa-cloud-upload-alt fa-2x"></i>
                            <div class="file-upload-text">Click to select an image or drag and drop</div>
                        </div>
                        <input type="file" id="imageFile" name="ImageFile" accept=".jpg,.jpeg,.png,.gif" style="display: none;" />
                    </div>
                    <button type="submit" class="send-message-btn">
                        <i class="fas fa-image"></i> Send Image
                    </button>
                </form>
            </div>

            <!-- Transfer Input -->
            <div id="transfer-input" class="input-type-container hidden">
                <form asp-controller="ChatMessages" asp-action="SendMessage" method="post">
                    <input type="hidden" name="CurrentChatID" value="@Model.CurrentChatID" />
                    <input type="hidden" name="SelectedMessageType" value="Transfer" />
                    <div class="currency-amount-row">
                        <div class="input-group">
                            <label for="Amount">Amount</label>
                            <input type="number" class="form-control" name="Amount" placeholder="0.00" step="0.01" min="0" required />
                        </div>
                        <div class="input-group currency-select">
                            <label for="Currency">Currency</label>
                            <select class="form-control" name="Currency" required>
                                <option value="USD">USD</option>
                                <option value="EUR">EUR</option>
                                <option value="RON">RON</option>
                                <option value="GBP">GBP</option>
                                <option value="JPY">JPY</option>
                            </select>
                        </div>
                    </div>
                    <div class="input-group">
                        <label for="Description">Description</label>
                        <input type="text" class="form-control" name="Description" placeholder="What's this transfer for?" required />
                    </div>
                    <button type="submit" class="send-message-btn">
                        <i class="fas fa-exchange-alt"></i> Send Transfer
                    </button>
                </form>
            </div>

            <!-- Request Input -->
            <div id="request-input" class="input-type-container hidden">
                <form asp-controller="ChatMessages" asp-action="SendMessage" method="post">
                    <input type="hidden" name="CurrentChatID" value="@Model.CurrentChatID" />
                    <input type="hidden" name="SelectedMessageType" value="Request" />
                    <div class="currency-amount-row">
                        <div class="input-group">
                            <label for="Amount">Amount</label>
                            <input type="number" class="form-control" name="Amount" placeholder="0.00" step="0.01" min="0" required />
                        </div>
                        <div class="input-group currency-select">
                            <label for="Currency">Currency</label>
                            <select class="form-control" name="Currency" required>
                                <option value="USD">USD</option>
                                <option value="EUR">EUR</option>
                                <option value="RON">RON</option>
                                <option value="GBP">GBP</option>
                                <option value="JPY">JPY</option>
                            </select>
                        </div>
                    </div>
                    <div class="input-group">
                        <label for="Description">Description</label>
                        <input type="text" class="form-control" name="Description" placeholder="What are you requesting money for?" required />
                    </div>
                    <button type="submit" class="send-message-btn">
                        <i class="fas fa-hand-holding-usd"></i> Request Money
                    </button>
                </form>
            </div>

            <!-- Bill Split Input -->
            <div id="billsplit-input" class="input-type-container hidden">
                <form asp-controller="ChatMessages" asp-action="SendMessage" method="post">
                    <input type="hidden" name="CurrentChatID" value="@Model.CurrentChatID" />
                    <input type="hidden" name="SelectedMessageType" value="BillSplit" />
                    <div class="currency-amount-row">
                        <div class="input-group">
                            <label for="Amount">Total Amount</label>
                            <input type="number" class="form-control" name="Amount" placeholder="0.00" step="0.01" min="0" required />
                        </div>
                        <div class="input-group currency-select">
                            <label for="Currency">Currency</label>
                            <select class="form-control" name="Currency" required>
                                <option value="USD">USD</option>
                                <option value="EUR">EUR</option>
                                <option value="RON">RON</option>
                                <option value="GBP">GBP</option>
                                <option value="JPY">JPY</option>
                            </select>
                        </div>
                    </div>
                    <div class="input-group">
                        <label for="Description">Description</label>
                        <input type="text" class="form-control" name="Description" placeholder="What bill are you splitting?" required />
                    </div>
                    <input type="hidden" id="hidden-participants" name="Participants" />
                    <div class="input-group">
                        <label>Participants</label>
                        <div class="participants-container">
                            <div id="participants-list">
                                @foreach (var participant in Model.CurrentChatParticipants)
                                {
                                    <span class="participant-chip" data-user-id="@participant">
                                        @participant <span class="remove-btn" onclick="removeParticipant(this)">&times;</span>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="send-message-btn">
                        <i class="fas fa-receipt"></i> Split Bill
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Scroll to bottom on load
            var messagesContainer = $("#messagesContainer");
            messagesContainer.scrollTop(messagesContainer[0].scrollHeight);

            // Message type switching functionality
            $('.message-type-btn').click(function () {
                // Remove active class from all buttons
                $('.message-type-btn').removeClass('active');
                // Add active class to clicked button
                $(this).addClass('active');

                // Hide all input containers
                $('.input-type-container').addClass('hidden');
                
                // Show the selected input container
                var messageType = $(this).data('type');
                $('#' + messageType + '-input').removeClass('hidden');
            });

            // Character counter for text messages
            $('#text-input textarea[name="MessageContent"]').on('input', function() {
                var remaining = 256 - $(this).val().length;
                $(this).siblings('.character-count').text(remaining + ' characters remaining');
            });

            // Dynamic participant management for bill splitting
            function addParticipant() {
                var participantInput = $('#participant-input');
                var participantValue = participantInput.val().trim();
                
                if (participantValue && !$(`[data-user-id="${participantValue}"]`).length) {
                    var chip = $(`
                        <span class="participant-chip" data-user-id="${participantValue}">
                            ${participantValue} <span class="remove-btn" onclick="removeParticipant(this)">&times;</span>
                        </span>
                    `);
                    $('#participants-list').append(chip);
                    participantInput.val('');
                    updateParticipantsInput();
                }
            }

            $('#add-participant-btn').click(addParticipant);
            $('#participant-input').keypress(function(e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    addParticipant();
                }
            });

            window.removeParticipant = function(element) {
                $(element).parent().remove();
                updateParticipantsInput();
            };

            function updateParticipantsInput() {
                var participants = [];
                $('.participant-chip').each(function() {
                    participants.push($(this).data('user-id'));
                });
                $('#hidden-participants').val(participants.join(','));
            }
            
            // Initialize participants
            updateParticipantsInput();

            function refreshMessages() {
                $.ajax({
                    url: "/ChatMessages/GetMessages?chatId=@Model.CurrentChatID",
                    success: function (data) {
                        if (data && data.success && data.messages) {
                            // Process messages and update UI
                            var messagesHtml = '';
                            data.messages.forEach(function(msg) {
                                // Generate message HTML and append it
                                messagesHtml += createMessageHtml(msg);
                            });
                            
                            // Only update if we have new content
                            if (messagesHtml) {
                                $("#messagesContainer").html(messagesHtml);
                                messagesContainer.scrollTop(messagesContainer[0].scrollHeight);
                            }
                        }
                    }
                });
            }

            function createMessageHtml(message) {
                // This would need to be implemented to match your message rendering logic
                // but keeping it simple for now
                return `<div class="message mb-2 ${message.isMyMessage ? 'text-end' : 'text-start'}">
                    <strong>${message.senderName}</strong> <small>${message.formattedTime}</small>
                    <div class="message-bubble ${message.bubbleClass}">
                        ${message.content}
                        <div class="message-meta">${message.formattedTime}</div>
                    </div>
                </div>`;
            }

            function showSuccessMessage(message) {
                // Create and show success notification
                var notification = $(`
                    <div class="alert alert-success alert-dismissible fade show position-fixed" 
                         style="top: 20px; right: 20px; z-index: 1050;">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);
                $('body').append(notification);
                setTimeout(function() {
                    notification.fadeOut(function() {
                        $(this).remove();
                    });
                }, 3000);
            }

            function showErrorMessage(message) {
                // Create and show error notification
                var notification = $(`
                    <div class="alert alert-danger alert-dismissible fade show position-fixed" 
                         style="top: 20px; right: 20px; z-index: 1050;">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `);
                $('body').append(notification);
                setTimeout(function() {
                    notification.fadeOut(function() {
                        $(this).remove();
                    });
                }, 5000);
            }

            // Check for any TempData messages
            @if (TempData["Success"] != null)
            {
                <text>showSuccessMessage('@TempData["Success"]');</text>
            }
            
            @if (TempData["Error"] != null)
            {
                <text>showErrorMessage('@TempData["Error"]');</text>
            }

            // Poll for new messages every 3 seconds
            setInterval(refreshMessages, 3000);
        });
    </script>
}