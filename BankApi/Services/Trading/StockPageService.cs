namespace BankApi.Services.Trading
{
    using BankApi.Repositories;
    using BankApi.Repositories.Trading;
    using Common.Models;
    using Common.Models.Trading;
    using Common.Services.Trading;
    using Microsoft.AspNetCore.Identity;
    using Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.Blazor;
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;

    /// <summary>
    /// Initializes a new instance of the <see cref="StockPageService"/> class.
    /// </summary>
    public class StockPageService(IStockPageRepository stockRepo, IUserRepository userRepo, IStockTransactionRepository transactionRepo,IStockRepository stockRepository, ILogger<StockPageService> logger) : IStockPageService
    {
        private readonly IStockPageRepository stockRepo = stockRepo ?? throw new ArgumentNullException(nameof(stockRepo));
        private readonly IUserRepository userRepo = userRepo ?? throw new ArgumentNullException(nameof(userRepo));
        private readonly IStockTransactionRepository transactionRepo = transactionRepo ?? throw new ArgumentNullException(nameof(transactionRepo));
        private readonly IStockRepository stockRepository = stockRepository ?? throw new ArgumentNullException(nameof(stockRepository));
        private readonly ILogger<StockPageService> _logger= logger;

        readonly Random randomNumberGenerator = new();

        /// <inheritdoc/>
        public async Task<string> GetStockNameAsync(string stockName)
        {
            var stock = await stockRepo.GetStockAsync(stockName);
            return stock.Name;
        }

        /// <inheritdoc/>
        public async Task<string> GetStockSymbolAsync(string stockName)
        {
            var stock = await stockRepo.GetStockAsync(stockName);
            return stock.Symbol;
        }        /// <inheritdoc/>
        public async Task<List<decimal>> GetStockHistoryAsync(string stockName)
        {
            return await stockRepo.GetStockHistoryAsync(stockName);
        }

        /// <inheritdoc/>
        public async Task<int> GetOwnedStocksAsync(string stockName, string userCNP)
        {
            return await stockRepo.GetOwnedStocksAsync(userCNP, stockName);
        }

        /// <inheritdoc/>
        public async Task<UserStock> GetUserStockAsync(string stockName, string userCNP)
        {
            if (string.IsNullOrEmpty(stockName))
            {
                throw new Exception("No stock selected.");
            }
            var userStock = await stockRepo.GetUserStockAsync(userCNP, stockName);
            return userStock ?? throw new Exception("User stock not found.");
        }

        /// <inheritdoc/>
        public async Task<bool> BuyStockAsync(string stockName, int quantity, string userCNP)
        {
            var selectedStock = await stockRepo.GetStockAsync(stockName);
            int stockPrice = selectedStock.Price;
            int totalPrice = stockPrice * quantity;
            int ownedStockCount = await stockRepo.GetOwnedStocksAsync(userCNP, stockName);
            var user = await userRepo.GetByCnpAsync(userCNP);
            if (user?.GemBalance >= totalPrice)
            {
                user.GemBalance -= totalPrice;
                await userRepo.UpdateAsync(user);

                decimal newPrice = stockPrice + (randomNumberGenerator.Next(0, 20) - 5) * quantity;
                newPrice = Math.Max(newPrice, 20);

                await stockRepo.AddStockValueAsync(stockName, newPrice);
                await stockRepo.AddOrUpdateUserStockAsync(userCNP, stockName, ownedStockCount + quantity);

                await transactionRepo.AddTransactionAsync(
                    new StockTransaction
                    {
                        Id = 0, // Assuming Id is auto-generated by the database
                        StockSymbol = selectedStock.Symbol,
                        StockName = stockName,
                        Type = "BUY",
                        Amount = quantity,
                        PricePerStock = stockPrice,
                        Date = DateTime.UtcNow,
                        AuthorCNP = userCNP,
                        Author = user
                    });

                await SimulateStocksAsync();

                return true;
            }

            return false;
        }


        public async Task<bool> SimulateBuyStockAsync(string stockName, int quantity, string userCNP)
        {
            var selectedStock = await stockRepo.GetStockAsync(stockName);
            int stockPrice = selectedStock.Price;
            int totalPrice = stockPrice * quantity;
            int ownedStockCount = await stockRepo.GetOwnedStocksAsync(userCNP, stockName);
            var user = await userRepo.GetByCnpAsync(userCNP);
            if (user?.GemBalance >= totalPrice)
            {
                user.GemBalance -= totalPrice;
                await userRepo.UpdateAsync(user);

                decimal newPrice = stockPrice + (randomNumberGenerator.Next(0, 20) - 5) * quantity;
                newPrice = Math.Max(newPrice, 20);

                await stockRepo.AddStockValueAsync(stockName, newPrice);
                await stockRepo.AddOrUpdateUserStockAsync(userCNP, stockName, ownedStockCount + quantity);

                await transactionRepo.AddTransactionAsync(
                    new StockTransaction
                    {
                        Id = 0, // Assuming Id is auto-generated by the database
                        StockSymbol = selectedStock.Symbol,
                        StockName = stockName,
                        Type = "BUY",
                        Amount = quantity,
                        PricePerStock = stockPrice,
                        Date = DateTime.UtcNow,
                        AuthorCNP = userCNP,
                        Author = user
                    });
                

                return true;
            }

            return true;
        }

        /// <inheritdoc/>
        public async Task<bool> SellStockAsync(string stockName, int quantity, string userCNP)
        {
            var selectedStock = await stockRepo.GetStockAsync(stockName);
            int totalPrice = selectedStock.Price * quantity;
            int ownedStockCount = await stockRepo.GetOwnedStocksAsync(userCNP, stockName); if (ownedStockCount >= quantity)
            {
                decimal newPrice = selectedStock.Price + (randomNumberGenerator.Next(0, 10) - 5) * quantity;
                newPrice = Math.Max(newPrice, 20);

                await stockRepo.AddStockValueAsync(stockName, newPrice);
                await stockRepo.AddOrUpdateUserStockAsync(userCNP, stockName, ownedStockCount - quantity);

                var user = await userRepo.GetByCnpAsync(userCNP);
                user.GemBalance += totalPrice;
                await userRepo.UpdateAsync(user);

                await transactionRepo.AddTransactionAsync(
                    new StockTransaction
                    {
                        Id = 0, // Assuming Id is auto-generated by the database
                        StockSymbol = selectedStock.Symbol,
                        StockName = stockName,
                        Type = "SELL",
                        Amount = quantity,
                        PricePerStock = selectedStock.Price,
                        Date = DateTime.UtcNow,
                        AuthorCNP = userCNP,
                        Author = user
                    });
                await SimulateStocksAsync();


                return true;
            }

            return false;
        }


        public async Task<bool> SimulateSellStockAsync(string stockName, int quantity, string userCNP)
        {
            var selectedStock = await stockRepo.GetStockAsync(stockName);
            int totalPrice = selectedStock.Price * quantity;
            int ownedStockCount = await stockRepo.GetOwnedStocksAsync(userCNP, stockName); if (ownedStockCount >= quantity)
            {
                decimal newPrice = selectedStock.Price + (randomNumberGenerator.Next(0, 10) - 5) * quantity;
                newPrice = Math.Max(newPrice, 20);

                await stockRepo.AddStockValueAsync(stockName, newPrice);
                await stockRepo.AddOrUpdateUserStockAsync(userCNP, stockName, ownedStockCount - quantity);

                var user = await userRepo.GetByCnpAsync(userCNP);
                user.GemBalance += totalPrice;
                await userRepo.UpdateAsync(user);

                await transactionRepo.AddTransactionAsync(
                    new StockTransaction
                    {
                        Id = 0, // Assuming Id is auto-generated by the database
                        StockSymbol = selectedStock.Symbol,
                        StockName = stockName,
                        Type = "SELL",
                        Amount = quantity,
                        PricePerStock = selectedStock.Price,
                        Date = DateTime.UtcNow,
                        AuthorCNP = userCNP,
                        Author = user
                    });

                return true;
            }

            return false;
        }


        public async Task<bool> SimulateStocksAsync()
        {
            var passwordHasher = new PasswordHasher<User>();

            var fictitiousUsers = new List<User>
    {
        new User {
            CNP = "1000000000001",
            FirstName = "Alice",
            LastName = "Sim",
            UserName = "alice.sim",
            Email = "alice.sim@example.com",
            GemBalance = 1000,
            Birthday = DateTime.UtcNow.AddYears(-30)
        },
        new User {
            CNP = "1000000000002",
            FirstName = "Bob",
            LastName = "Sim",
            UserName = "bob.sim",
            Email = "bob.sim@example.com",
            GemBalance = 1200,
            Birthday = DateTime.UtcNow.AddYears(-25)
        },
        new User {
            CNP = "1000000000003",
            FirstName = "Charlie",
            LastName = "Sim",
            UserName = "charlie.sim",
            Email = "charlie.sim@example.com",
            GemBalance = 8000,
            Birthday = DateTime.UtcNow.AddYears(-35)
        }
    };

            // Reset or create users
            foreach (var user in fictitiousUsers)
            {
                var existing = await userRepo.GetByCnpAsync(user.CNP);
                if (existing == null)
                {
                    user.PasswordHash = passwordHasher.HashPassword(user, "Test123!");
                    await userRepo.CreateAsync(user);
                }
                else
                {
                    existing.GemBalance = user.GemBalance;
                    existing.FirstName = user.FirstName;
                    existing.LastName = user.LastName;
                    existing.UserName = user.UserName;
                    existing.Email = user.Email;
                    existing.Birthday = user.Birthday;
                    await userRepo.UpdateAsync(existing);

                    // Optionally clear user stocks for a clean simulation
                    // await stockRepo.ClearUserStocksAsync(existing.CNP);
                }
            }

            var allStocks = (await stockRepository.GetAllAsync()).ToList();
            


            foreach (var user in fictitiousUsers)
            {
                var dbUser = await userRepo.GetByCnpAsync(user.CNP);
                
                    var allUserStocks = (await stockRepository.UserStocksAsync(user.CNP)).ToList();
                foreach (var stock in allUserStocks)
                {

                    if (randomNumberGenerator.NextDouble() < 0.5)
                    {
                        int quantity = 1;
                        if (dbUser.GemBalance >= stock.Price * quantity)
                        {
                            await SimulateSellStockAsync(stock.Name, quantity, dbUser.CNP);
                            dbUser.GemBalance += stock.Price * quantity;
                            await userRepo.UpdateAsync(dbUser);
                        }
                    }



                }




                foreach (var stock in allStocks)
                {
                    if (randomNumberGenerator.NextDouble() < 0.5)
                    {
                        int quantity = 1;
                        if (dbUser.GemBalance >= stock.Price * quantity)
                        {
                            await SimulateBuyStockAsync(stock.Name, quantity, dbUser.CNP);
                            dbUser.GemBalance -= stock.Price * quantity;
                            await userRepo.UpdateAsync(dbUser);
                        }
                    }
                }
            }

            _logger.LogInformation("Stock simulation completed.");
            return true;
        }


        public async Task<bool> GetFavoriteAsync(string stockName, string userCNP)
        {
            return await stockRepo.GetFavoriteAsync(userCNP, stockName);
        }

      
        public async Task ToggleFavoriteAsync(string stockName, bool state, string userCNP)
        {
            await stockRepo.ToggleFavoriteAsync(userCNP, stockName, state);
        }

        public async Task<User> GetStockAuthorAsync(string stockName)
        {
            var stock = await stockRepo.GetStockAsync(stockName);
            return await userRepo.GetByCnpAsync(stock.AuthorCNP) ?? throw new Exception("User not found.");
        }
    }
}
